# Generated by Django 2.2 on 2019-11-13 16:48

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=150)),
                ('image', models.ImageField(default='image/restoran/default.png', null=True, upload_to='image/restoran/')),
            ],
        ),
        migrations.CreateModel(
            name='Restoran',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=150)),
                ('image', models.ImageField(default='image/restoran/default.png', null=True, upload_to='image/restoran/')),
                ('tables', models.SmallIntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Table',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.SmallIntegerField(blank=True)),
                ('color', models.SmallIntegerField(blank=True, choices=[(1, 'Green'), (2, 'Yellow'), (3, 'Red'), (4, 'Red Yellow'), (5, 'Blue')], default=1)),
                ('restoran', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='app.Restoran')),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=150)),
                ('body', models.TextField()),
                ('status', models.SmallIntegerField(blank=True, choices=[(1, 'порция'), (2, 'штук'), (3, 'литр'), (4, 'стакан')])),
                ('unit', models.SmallIntegerField(blank=True)),
                ('price', models.IntegerField(blank=True)),
                ('image', models.ImageField(default='image/restoran/default.png', null=True, upload_to='image/restoran/')),
                ('category', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='app.Category')),
            ],
        ),
        migrations.CreateModel(
            name='ImageProduct',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(default='image/restoran/default.png', null=True, upload_to='image/restoran/')),
                ('product_image', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='app.Product')),
            ],
        ),
        migrations.AddField(
            model_name='category',
            name='restoran',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='app.Restoran'),
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('mobile', models.IntegerField(null=True, verbose_name='phone number')),
                ('avatar', models.ImageField(default='image/avatar/worker/default.png', null=True, upload_to='image/avatar/worker')),
                ('status', models.SmallIntegerField(choices=[(0, 'admin'), (1, 'worker'), (2, 'user')], null=True, verbose_name='Status')),
                ('wage', models.IntegerField(null=True, verbose_name='Wage')),
                ('wage_type', models.SmallIntegerField(choices=[(0, 'hour'), (1, 'day'), (2, 'month')], null=True, verbose_name='Wage type')),
                ('duty', models.SmallIntegerField(choices=[(0, 'security'), (1, 'Chef'), (2, 'cashier'), (3, 'manager'), (4, 'waitress')], null=True, verbose_name='Duty')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
